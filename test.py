import time
import schedule
import asyncio
from selenium import webdriver
from selenium.webdriver.common.by import By
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
import json
import os
import datetime
import parsing_mobile_de
import parsing_marktplaats_nl
import parsing_autoscout24_nl
from concurrent.futures import ThreadPoolExecutor

API_TOKEN = os.getenv("botToken")
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É, –¥–µ –±—É–¥–µ–º–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ —Ç–∞–π–º–µ—Ä
settings_file = "user_settings.json"

def get_cars_data(url, user_id):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –æ–¥–Ω–æ–≥–æ —Å–∞–π—Ç—É."""
    with open(settings_file, 'r') as f:
        user_settings = json.load(f)

    if "cars" not in user_settings[user_id]:
        user_settings[user_id]["cars"] = []
    
    with open(settings_file, 'w') as f:
        json.dump(user_settings, f, indent=4)

    if url.startswith("https://suchen.mobile.de"):
        return parsing_mobile_de.get_website_data(url, user_id)
    elif url.startswith("https://www.marktplaats.nl"):
        return parsing_marktplaats_nl.get_website_data(url, user_id)
    elif url.startswith("https://www.autoscout24.nl"):
        return parsing_autoscout24_nl.get_website_data(url, user_id)
    
    return []

async def parse_website(user_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –≤—Å—ñ —Å–∞–π—Ç–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    try:
        with open(settings_file, 'r') as f:
            user_settings = json.load(f)

        urls = user_settings[str(user_id)]['urls']

        loop = asyncio.get_running_loop()
        new_cars_list = []

        with ThreadPoolExecutor() as executor:
            tasks = [loop.run_in_executor(executor, get_cars_data, url, user_id) for url in urls]
            results = await asyncio.gather(*tasks)

        for new_cars in results:
            new_cars_list.extend(new_cars)

        for car in new_cars_list:
            name, price, kilometerage, year, acu, link = car
            content = f"üöó –Ü–º'—è: {name}\nüí∞ –¶—ñ–Ω–∞: {price}\nüìè –ü—Ä–æ–±—ñ–≥: {kilometerage}\nüìÖ –†—ñ–∫: {year}\n‚ö° –ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å: {acu}\nüîó –°–∏–ª–∫–∞: {link}"
            await bot.send_message(user_id, content)

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–∞—Ä—Å–∏–Ω–≥—É
async def job(user_id):
    with open(settings_file, 'r') as f:
        user_settings = json.load(f)

    if user_settings[user_id]["interval"] != 0:
        await parse_website(user_id)

def set_schedule(user_id, interval_minutes):
    if any(f"parse_{user_id}" in job1.tags for job1 in schedule.jobs):
        return

    job_timer = schedule.every(interval_minutes).minutes.do(lambda: asyncio.create_task(job(user_id)))
    job_timer.tag(f"parse_{user_id}")



def load_timer(user_id):
    try:
        with open(settings_file, 'r') as f:
            user_settings = json.load(f)
        return user_settings[str(user_id)]["interval"]
    except Exception as e:
        print(f"Error loading timer: {e}")
        return 0

@dp.message(Command("help", "Help"))
async def help(message: Message):
    await message.answer("—è –º–æ–∂—É –ø–∞—Ä—Å–∏—Ç–∏ —Å–∞–π—Ç–∏ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —á–µ—Ä–µ–∑ Telegram. "
                         "–î–ª—è –ø–æ—á–∞—Ç–∫—É, –≤–≤–µ–¥—ñ—Ç—å /start.\n"
                         "–î–ª—è –ø–æ—á–∞—Ç–∫—É –ø–∞—Ä—Å–∏–Ω–≥—É —Å–∞–π—Ç—ñ–≤, –≤–≤–µ–¥—ñ—Ç—å /parse.\n"
                         "–î–ª—è –∑—É–ø–∏–Ω–µ–Ω–Ω—è –ø–∞—Ä—Å–∏–Ω–≥—É —Å–∞–π—Ç—ñ–≤, –≤–≤—É–¥—ñ—Ç—å /stop.\n"
                         "–î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∞–π—Ç—ñ–≤, –≤–≤–µ–¥—ñ—Ç—å /add <url>.\n"
                         "–î–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∞–π—Ç—ñ–≤, –≤–≤–µ–¥—ñ—Ç—å /remove <–Ω–æ–º–µ—Ä>.\n"
                         "–î–ª—è –∑–∞–º—ñ–Ω–∏ —Å–∞–π—Ç—É, –≤–≤—É–¥—ñ—Ç—å /replace <–Ω–æ–º–µ—Ä> <url>.\—Ç"
                         "–î–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å–∞–π—Ç—ñ–≤, –≤–≤–µ–¥—ñ—Ç—å /list.\n"
                         "–©–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —á–µ—Ä–µ–∑ —Å–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –±—É–¥–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥, –≤–≤–µ–¥—ñ—Ç—å /next_parse.\n"
                         "–î–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –ø–∞—Ä—Å–∏–Ω–≥—É, –≤–≤–µ–¥—ñ—Ç—å /set_timer <—á–∞—Å_–≤_—Å–µ–∫—É–Ω–¥–∞—Ö>.")
    

@dp.message(Command("next_parse", "Next_parse"))
async def help(message: Message):
    user_id = str(message.from_user.id)

    with open(settings_file, 'r') as f:
        user_settings = json.load(f)

    if user_id not in user_settings:
        user_settings[user_id] = {"urls": [], "interval": 0, "cars": []}

    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —á–∞—Å –∑–∞–ø—É—Å–∫—É –ø–∞—Ä—Å–∏–Ω–≥—É
    job_time = next((job.next_run for job in schedule.jobs if f'parse_{user_id}' in job.tags), None)

    if job_time is None:
        await message.answer("–ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –≤–∫–ª—é—á–µ–Ω–∏–π.")
        return

    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É
    secunde_left = (job_time - datetime.datetime.now()).total_seconds()
    formatted_time = job_time.strftime('%Y-%m-%d %H:%M:%S')  # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏

    text = f"–ù–∞—Å—Ç—É–ø–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ {int(secunde_left)} —Å–µ–∫—É–Ω–¥ ({formatted_time})."
    await message.answer(text)


@dp.message(Command("replace", "Replace"))
async def replace(message: Message):
    with open(settings_file, 'r') as f:
        user_settings = json.load(f)
    
    user_id = str(message.from_user.id)
    if user_id not in user_settings:
        user_settings[user_id] = {
            "urls": [],
            "interval": 0,
            "cars": []
        }
    
    url = message.text.split(" ")[2]
    index = message.text.split(" ")[1]
    
    try:
        user_settings[user_id]["urls"][index] = url
    except IndexError:
        await message.answer("–ù–µ –≤—ñ—Ä–Ω–æ –≤–∫–∞–∑–∞–Ω–æ —ñ–Ω–¥–µ–∫—Å. —â–æ–± –∑–∞–º—ñ–Ω–∏—Ç–∏ —Å–∞–π—Ç –Ω–∞–ø–∏—à—ñ—Ç—å /replace <–Ω–æ–º–µ—Ä> <url_—Å–∞–π—Ç–∞>")
        return

    with open(settings_file, 'w') as f:
        json.dump(user_settings, f, indent=4)
    
    await message.answer("–°–∞–π—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–º—ñ–Ω–µ–Ω–æ.")

@dp.message(Command("add", "Add"))
async def add(message: Message):
    with open(settings_file, 'r') as f:
        user_settings = json.load(f)
    
    user_id = str(message.from_user.id)
    if user_id not in user_settings:
        user_settings[user_id] = {
            "urls": [],
            "interval": 0,
            "cars": []
        }
    try:
        url = message.text.split(" ")[1]

        user_settings[user_id]["urls"].append(url)

        with open(settings_file, 'w') as f:
            json.dump(user_settings, f, indent=4)
        
        await message.answer("–°–∞–π—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ.")
    except IndexError:
        await message.answer("–ù–µ –≤–∫–∞–∑–∞–Ω–æ —Å–∞–π—Ç –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è. –©–æ–± –¥–æ–¥–∞—Ç–∏ —Å–∞–π—Ç –Ω–∞–ø–∏—à—ñ—Ç—å /add <url_—Å–∞–π—Ç–∞>")

@dp.message(Command("remove", "Remove"))
async def remove(message: Message):
    with open(settings_file, 'r') as f:
        user_settings = json.load(f)
    
    user_id = str(message.from_user.id)

    if user_id not in user_settings:
        user_settings[user_id] = {
            "urls": [],
            "interval": 0,
            "cars": []
        }
    try:
        index = message.text.split(" ")[1]

        user_settings[user_id]["urls"].pop(index)

        with open(settings_file, 'w') as f:
            json.dump(user_settings, f, indent=4)
        
        await message.answer("–°–∞–π—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    except IndexError:
        await message.answer("–ù–µ –≤–∫–∞–∑–∞–Ω–æ –Ω–æ–º–µ—Ä —Å–∞–π—Ç—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è. –©–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–∞–π—Ç –Ω–∞–ø–∏—à—ñ—Ç—å /remove <–Ω–æ–º–µ—Ä>")

# –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message(Command("start"))
async def start(message: Message):
    with open(settings_file, 'r') as f:
        user_settings = json.load(f)
    if user_settings == None:
        user_settings = {}
    
    user_id = str(message.from_user.id)
    if user_id not in user_settings:
        user_settings[user_id] = {
            "urls": [],
            "interval": 0,
            "cars": []
        }
        with open(settings_file, 'w') as f:
            json.dump(user_settings, f, indent=4)

    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É —Å–∞–π—Ç—ñ–≤. –ù–∞–ø–∏—à–∏ /help, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏.")


@dp.message(Command("list"))
async def list(message: Message):
    with open(settings_file, 'r') as f:
        user_settings = json.load(f)

    user_id = str(message.from_user.id)
    user_urls = user_settings[str(user_id)]['urls']

    await message.answer("\n".join([f"{i + 1}. {url}" for i, url in enumerate(user_urls)]))

@dp.message(Command("stop"))
async def stop(message: Message):
    user_id = str(message.from_user.id)
    if any(f"parse_{user_id}" in job1.tags for job1 in schedule.jobs):
        schedule.clear()
        await message.answer("–ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç—ñ–≤ –∑—É–ø–∏–Ω–µ–Ω–æ.")
    else:
        await message.answer("–ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç—ñ–≤ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π.")

@dp.message(Command("parse", "Parse"))
async def parse(message: Message):
    print(schedule.jobs)

    with open(settings_file, 'r') as f:
        user_settings = json.load(f)

    user_id = str(message.from_user.id)
    user_urls = user_settings[str(user_id)]['urls']

    if not user_urls or user_urls == []:
        await message.answer("–ù–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Å–∞–π—Ç—ñ–≤.\n–î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∞–π—Ç—ñ–≤, –≤–≤–µ–¥—ñ—Ç—å /add <url>.")
        return
    
    if any(f"parse_{user_id}" in job.tags for job in schedule.jobs):
        await message.answer("–ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç—ñ–≤ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π.\n–©–æ–± –∑—É–ø–∏–≥—Ç–∏ –π–æ–≥–æ –Ω–∞–ø–∏—à—ñ—Ç—å /stop")
        return
    
    if user_settings[user_id]["interval"] <= 0:
        await message.answer("–í–∏ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª.\n–©–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_timer <—á–∞—Å_–≤_–º—ñ–Ω—É—å–∞—Ö>")
        return

    await message.answer("–ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç—ñ–≤ –∑–∞–ø—É—â–µ–Ω–æ.")

    set_schedule(user_id, user_settings[user_id]["interval"])

@dp.message(Command("set_timer"))
async def set_timer(message: Message):
    user_id = str(message.from_user.id)
    try:
        new_timer = int(message.text.split(" ")[-1])

    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ")
        return
    
    except IndexError:
        await message.answer("–ù–µ –≤–∫–∞–∑–∞–Ω–æ —á–∞—Å –¥–ª—è –∑–º—ñ–Ω–∏ —Ç–∞–π–º–µ—Ä–∞. –©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —Ç–∞–π–º–µ—Ä –Ω–∞–ø–∏—à—ñ—Ç—å /set_timer <—á–∞—Å_–≤_—Ö–≤–∏–ª–∏–Ω–∞—Ö>.")
        return
    
    try:
        if new_timer < 1:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ (–≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö).")
            return

        with open(settings_file, 'r') as f:
            user_settings = json.load(f)

        if str(user_id) not in user_settings:
            user_settings[str(user_id)] = {"urls": [], "interval": 0, "cars": []}

        user_settings[str(user_id)]["interval"] = new_timer

        with open(settings_file, 'w') as f:
            json.dump(user_settings, f, indent=4)

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
        set_schedule(user_id, new_timer)
        if new_timer == 1:
            await message.answer(f"–¢–∞–π–º–µ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_timer} —Ö–≤–∏–ª–∏–Ω–∞.")
        else:
            await message.answer(f"–¢–∞–π–º–µ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_timer} —Ö–≤–∏–ª–∏–Ω.")
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ (–≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö).")

async def scheduler():
    while True:
        schedule.run_pending()
        await asyncio.sleep(1)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –°—Ç–∞—Ä—Ç—É—î–º–æ –æ–±—Ä–æ–±–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    await dp.start_polling(bot)

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(scheduler())  # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    loop.run_until_complete(main())  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
